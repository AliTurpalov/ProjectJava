import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StatisticsCalculator {

    public static List<Integer> readNumbersFromFile(String filePath) throws IOException {
        String content = Files.readString(Paths.get(filePath));
        return Arrays.stream(content.split("\\s+"))
                     .map(Integer::parseInt)
                     .collect(Collectors.toList());
    }

    public static int findMin(List<Integer> numbers) {
        return numbers.stream().min(Integer::compare).orElseThrow();
    }

    public static int findMax(List<Integer> numbers) {
        return numbers.stream().max(Integer::compare).orElseThrow();
    }

    public static int sumAll(List<Integer> numbers) {
        return numbers.stream().reduce(0, Integer::sum);
    }

    public static long multiplyAll(List<Integer> numbers) {
        return numbers.stream().reduce(1, (a, b) -> a * b);
    }
}

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.io.IOException;

public class MathOperationsTest {

    private List<Integer> numbers;

    public MathOperationsTest(String filePath) throws IOException {
        numbers = StatisticsCalculator.readNumbersFromFile(filePath);
    }

    @Test
    public void testFindMin() {
        int expected = 1;
        int actual = StatisticsCalculator.findMin(numbers);
        assertEquals(expected, actual);
    }

    @Test
    public void testFindMax() {
        int expected = 4;
        int actual = StatisticsCalculator.findMax(numbers);
        assertEquals(expected, actual);
    }

    @Test
    public void testSumAll() {
        int expected = 10;
        int actual = StatisticsCalculator.sumAll(numbers);
        assertEquals(expected, actual);
    }

    @Test
    public void testMultiplyAll() {
        long expected = 24;
        long actual = StatisticsCalculator.multiplyAll(numbers);
        assertEquals(expected, actual);
    }
}
